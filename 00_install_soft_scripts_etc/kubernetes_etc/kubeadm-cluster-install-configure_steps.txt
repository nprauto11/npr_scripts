
#################### kubernetes cluster (kubeadm) installation on ubuntu22 ######################


step-0: verify the pre-requisite software packages (if installed, execute from step-1)
======
# Note:- before proceeding further ensure all pre-requesites should be installed via automated script on all nodes
         (docker, cri-dockerd, kubeadm, kubelet, kubectl)

# validate with below commands:
  $ sudo su -
  $ docker -v
  $ cri-dockerd --version
  $ kubeadm version -o short
  $ kubelet --version
  $ kubectl version --short --client
  
# if above tools are installed skip below steps and go to step-1 
  # kubeadm cluster tools installtion
    $ mkdir -p /tmp/utilities
    $ wget https://raw.githubusercontent.com/nprauto11/npr_scripts/main/00_install_soft_scripts_etc/kubernetes_etc/aws_ubuntu22_kubeadm_tools_install.sh -P /tmp/utilities
    $ chmod 755 /tmp/utilities/aws_ubuntu22_kubeadm_tools_install.sh
    $ bash /tmp/utilities/aws_ubuntu22_kubeadm_tools_install.sh
  
  # download kubeadm_init_master script
    $ wget https://raw.githubusercontent.com/nprauto11/npr_scripts/main/00_install_soft_scripts_etc/kubernetes_etc/kubeadm_init_master.sh -P /tmp/utilities
    $ chmod 755 /tmp/utilities/kubeadm_init_master.sh
	
  
 
step-1: Manual steps
======
# update the hostname (on master & worker nodes) then after re-login putty session to reflect hostname 

  Master:
  ------
  $ sudo su -
  $ hsnm=master ; hostname $hsnm && echo $hsnm > /etc/hostname && echo "127.0.1.1    $hsnm" >> /etc/hosts
    
  
  Worker-1:
  --------
  $ sudo su -
  $ hsnm=worker-1 ; hostname $hsnm && echo $hsnm > /etc/hostname && echo "127.0.1.1    $hsnm" >> /etc/hosts


  Worker-2:
  --------
  $ sudo su -
  $ hsnm=worker-2 ; hostname $hsnm && echo $hsnm > /etc/hostname && echo "127.0.1.1    $hsnm" >> /etc/hosts
  
  # now re-login putty session for all nodes to reflect hostname 
  

## step 2:  Manual steps
==========			

  Master:  
  ------
  # (1) execute kubeadm initialisation script on Master node -->
    $ sudo su -
    $ bash /tmp/utilities/kubeadm_init_master.sh 
	
	
    # if init script file not present, download from below link:
	# $ wget https://raw.githubusercontent.com/nprauto11/npr_scripts/main/00_install_soft_scripts_etc/kubernetes_etc/kubeadm_init_master.sh -P /tmp/utilities
	# $ chmod 755 /tmp/utilities/kubeadm_init_master.sh 
	# $ bash /tmp/utilities/kubeadm_init_master.sh
	
  
  # (2) to join nodes to cluster, execute below command on master to get token -->
    $ kubeadm token create --print-join-command | awk '{print $0" --cri-socket unix:///var/run/cri-dockerd.sock"}'
    
	
  worker-1:
  ---------
  # Run the resultant token getting from master. example: 
  
   $ kubeadm join 172.31.7.65:6443 --token 3p8bzg.sulks92b5xvrdwm4 --discovery-token-ca-cert-hash sha256:9de17e4f40a3d248ddaea0c67c73ae2bf0c0ee36e6f106592c83536e680b71f1 --cri-socket unix:///var/run/cri-dockerd.sock


  worker-2:
  ---------
  # Run the resultant token getting from master. example: 
  
   $ kubeadm join 172.31.7.65:6443 --token 3p8bzg.sulks92b5xvrdwm4 --discovery-token-ca-cert-hash sha256:9de17e4f40a3d248ddaea0c67c73ae2bf0c0ee36e6f106592c83536e680b71f1 --cri-socket unix:///var/run/cri-dockerd.sock
  
  
  
## step 3:  validate on master node by below commands:-
==========		  

  $ kubectl get nodes 
  $ kubectl get nodes -o wide 
  
  # now execute kubectl ad-hoc commands or manifests to create pods, replicas or deployments and services 
  $ kubectl run nginx --image nginx 
  $ kubectl get pods
   
  $ kubectl run redis --image=redis123 --dry-run=client -o yaml > redis.yaml 
  $ kubectl create -f redis.yaml
  $ kubectl get pods
  
  $ kubectl run httpd1 --image=httpd:alpine --port=80 --expose
  $ kubectl run httpd2 --image=httpd:alpine --port=80 --expose --dry-run=client -o yaml > httpd.yaml
  